name: "Nix flake checks"

on:
  pull_request:
  push:
    branches:
      - "master"
      - "nixos-*"

permissions:
  contents: read

# One workflow per PR,
# and cancel in-progress workflows for PRs,
# but not for other jobs
concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  nix-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - uses: nixbuild/nix-quick-install-action@2c9db80fb984ceb1bcaa77cdda3fdf8cfba92035 # v34
      - id: set-matrix
        name: Generate Nix checks matrix
        run: |
          set -Eeu
          matrix="$(nix eval --json '.#githubActions.matrix')"
          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"

  nix-build:
    name: ${{ matrix.name }} (${{ matrix.system }})
    needs: nix-matrix
    runs-on: ${{ matrix.os }}
    permissions:
      actions: write
    env:
      CHECK_ATTR: ${{ matrix.attr }}
    strategy:
      matrix: ${{fromJSON(needs.nix-matrix.outputs.matrix)}}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - uses: nixbuild/nix-quick-install-action@2c9db80fb984ceb1bcaa77cdda3fdf8cfba92035 # v34
      - uses: nix-community/cache-nix-action@135667ec418502fa5a3598af6fb9eb733888ce6a # v6.1.3
        with:
          # Store the result in its own cache,
          # which will be merged below
          primary-key: check-${{ runner.os }}-${{ hashFiles('.github/workflows/build-checks.yml', 'flake.lock') }}-${{ matrix.name }}
          # Try and restore the main cache
          restore-prefixes-first-match: all-checks-${{ runner.os }}-
          # When saving the cache,
          # try to keep it under 2GiB
          gc-max-store-size: 2147483648
      - run: nix build -L ".#${CHECK_ATTR}"

  merge-caches:
    # TODO: this should be a matrix on the runners of the nix-build job.
    # Currently works only because we only target x86_64-linux
    runs-on: ubuntu-latest
    needs: nix-build
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - uses: nixbuild/nix-quick-install-action@25aff27c252e0c8cdda3264805f7b6bcd92c8718 # v29
      - uses: nix-community/cache-nix-action@8351fb9f51c580c96c509987ebb99e38aed956ce # v5.2.1
        with:
          primary-key: all-checks-${{ runner.os }}-${{ hashFiles('.github/workflows/build-checks.yml', 'flake.lock') }}
          # Restore all caches of the nix-build job
          # from the given runner OS
          restore-prefixes-all-matches: check-${{ runner.os }}-${{ hashFiles('.github/workflows/build-checks.yml', 'flake.lock') }}-
          purge: true
          # Purge every check,
          # and old versions of the merged cache
          purge-prefixes: |
            check-${{ runner.os }}-
            all-checks-${{ runner.os }}-
          # Created more than 0 seconds ago relative to the start of the `Post Restore` phase
          purge-created: 0
          # Except the cache we just created,
          # if we're on the main branch
          purge-primary-key: ${{ github.ref == 'refs/heads/master' && 'never' || 'always' }}
