{
  config,
  epnixLib,
  lib,
  pkgs,
  ...
}: let
  cfg = config.services.phoebus-scan-server;
  buildConfig = settings: with lib; concatLines (mapAttrsToList (k: v: "<${k}>${builtins.toString v}</${k}>") settings);
  mainConfig = buildConfig cfg.settings;
  pvConfig = with lib; concatLines (map (pv: "<pv>${buildConfig pv}</pv>") cfg.pvs);

  rawConfigFile = pkgs.writeText "scan_config_raw.xml" ''
    <?xml version="1.0"?>
    <!-- Generated by NixOS/EPNix (services.phoebus-scan-server) -->

    <scan_config>
        <!-- Set by services.phoebus-scan-server.settings: -->
        ${mainConfig}

        <!-- Set by services.phoebus-scan-server.pvs: -->
        ${pvConfig}
    </scan_config>
  '';

  schema = "${pkgs.epnix.phoebus-scan-server.src}/services/scan-server/src/main/resources/config/scan_config.xsd";
  configFile = pkgs.runCommand "scan_config.xml" {nativeBuildInputs = [pkgs.libxml2];} ''
    xmllint --schema ${schema} --format ${rawConfigFile} > $out
  '';
in {
  options.services.phoebus-scan-server = {
    enable = lib.mkEnableOption "the Phoebus scan server";

    settings = lib.mkOption {
      description = ''
        Configuration for Phoebus scan server

        Will be converted to an XML file

        PVs are not specified here but in services.phoebus-scan-server.pvs
      '';

      default = {};
      type = lib.types.submodule {
        freeformType = with lib.types; attrsOf (oneOf [str int]);

        options.port = lib.mkOption {
          type = lib.types.port;

          default = 4810;
        };
      };
    };

    pvs = lib.mkOption {
      default = [];
      type = lib.types.listOf (lib.types.submodule {
        freeformType = with lib.types; attrsOf str;
      });
    };

    openFirewall = lib.mkOption {
      description = ''
        Open the firewall for the Phoebus Scan Server.

        Warning: this opens the firewall on all network interfaces.
      '';
      type = lib.types.bool;
      default = false;
    };
  };

  config = lib.mkIf cfg.enable {
    systemd.services.phoebus-scan-server = {
      description = "Phoebus Scan Server";

      wantedBy = ["multi-user.target"];

      serviceConfig = {
        ExecStart = "${lib.getExe pkgs.epnix.phoebus-scan-server} -config ${configFile} -noshell";
      };
    };

    networking.firewall.allowedTCPPorts = lib.mkIf cfg.openFirewall [cfg.settings.port];
  };
}
